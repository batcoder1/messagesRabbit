'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defaultsDeep = require('lodash/defaultsDeep');

var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);

var _createChannel = require('./create-channel');

var _createChannel2 = _interopRequireDefault(_createChannel);

var _getChannelName = require('./get-channel-name');

var _getChannelName2 = _interopRequireDefault(_getChannelName);

var _subscriberConsumerFactory = require('./subscriber-consumer-factory');

var _subscriberConsumerFactory2 = _interopRequireDefault(_subscriberConsumerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultExchangeOptions = {
  durable: false,
  autoDelete: false
};

const defaultQueueOptions = {
  exclusive: true,
  autoDelete: true
};

const defaultSubscriberOptions = {
  noAck: true,
  exclusive: true
};

const addSubscriber = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (args, plugin) {
    const connection = args.connection,
          exchange = args.exchange,
          topic = args.topic,
          subscriber = args.subscriber,
          options = args.options;
    const pluginState = plugin.state;
    const _openChannels = pluginState._openChannels;

    var _ref2 = options || {};

    const userChannelName = _ref2.channelName,
          channelOptions = _ref2.channelOptions,
          userExchangeOptions = _ref2.exchangeOptions,
          userQueueOptions = _ref2.queueOptions,
          userSubscriberOptions = _ref2.subscriberOptions;


    let channel;

    try {
      const channelName = userChannelName || (0, _getChannelName2.default)({ method: 'subscribeToMessages', exchange });
      const exchangeTopic = topic ? `${exchange}.${topic}` : `${exchange}.*`;

      const exchangeOptions = (0, _defaultsDeep2.default)({}, userExchangeOptions, defaultExchangeOptions);
      const queueOptions = (0, _defaultsDeep2.default)({}, userQueueOptions, defaultQueueOptions);
      const subscriberOptions = (0, _defaultsDeep2.default)({}, userSubscriberOptions, defaultSubscriberOptions);

      if (_openChannels[channelName]) {
        channel = _openChannels[channelName].channel;
      } else {
        channel = yield (0, _createChannel2.default)({
          name: channelName,
          options: channelOptions,
          persist: true,
          connection
        }, plugin);
      }

      yield channel.assertExchange(exchange, 'topic', exchangeOptions);

      const queue = yield channel.assertQueue('', queueOptions);

      yield channel.bindQueue(queue.queue, exchange, exchangeTopic);

      const consumer = (0, _subscriberConsumerFactory2.default)({
        subscriber,
        channel,
        queue,
        options: subscriberOptions
      });

      const consumed = yield channel.consume(queue.queue, consumer, subscriberOptions);

      return {
        channel,
        queue,
        consumed
      };
    } catch (error) {
      throw error;
    }
  });

  return function addSubscriber(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = addSubscriber;