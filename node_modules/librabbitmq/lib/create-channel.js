'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createChannel = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (args, plugin) {
    const name = args.name,
          options = args.options,
          persist = args.persist;
    const pluginOptions = plugin.options,
          pluginState = plugin.state;
    const _openChannels = pluginState._openChannels,
          _defaultConnection = pluginState._defaultConnection;
    const preserveChannels = pluginOptions.preserveChannels;

    const connection = args.connection || _defaultConnection;

    _assert2.default.ok(connection, 'You must create a connection before creating a channel');

    try {
      const channel = yield connection.createChannel();

      if (options && !(0, _isEmpty2.default)(options)) {
        const optsSet = (0, _keys2.default)(options).map(function (opt) {
          return channel[opt](options[opt]);
        });

        yield _promise2.default.all(optsSet);
      }

      if (preserveChannels || persist) {
        const oldChannel = _openChannels[name] && _openChannels[name].channel;

        _openChannels[name] = {
          connection,
          name,
          channel,
          options,
          persist
        };

        if (oldChannel) {
          yield oldChannel.close();
        }
      }

      return channel;
    } catch (error) {
      throw error;
    }
  });

  return function createChannel(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = createChannel;