'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

var _amqplib = require('amqplib');

var _amqplib2 = _interopRequireDefault(_amqplib);

var _defaultsDeep = require('lodash/defaultsDeep');

var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);

var _retry = require('retry');

var _retry2 = _interopRequireDefault(_retry);

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _createChannel = require('./create-channel');

var _createChannel2 = _interopRequireDefault(_createChannel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getConnectionChannels = function getConnectionChannels(connection, openChannels) {
  return (0, _keys2.default)(openChannels).filter(channelName => {
    const connectName = (0, _get2.default)(openChannels, `${channelName}.connection._connectName`);
    return connectName === connection._connectName;
  }).map(channelName => openChannels[channelName]);
};

const keepConnectionAlive = function keepConnectionAlive(openConnection, options, plugin) {
  const connectionName = openConnection._connectName;

  const onConnectionError = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* () {
      if (plugin.state._defaultConnection._connectName === connectionName) {
        plugin.state._defaultConnection = null;
      }

      const connectionOptions = (0, _defaultsDeep2.default)({}, { connectionName }, options);

      const connection = yield createConnection(connectionOptions, plugin); // eslint-disable-line

      const connectionChannels = getConnectionChannels(connection, plugin.state._openChannels);

      const channelsCreated = connectionChannels.map(function (channel) {
        return (0, _createChannel2.default)({
          connection,
          name: channel.name,
          options: channel.options,
          persist: channel.persist
        }, plugin);
      });

      yield _promise2.default.all(channelsCreated);

      openConnection.removeListener('error', onConnectionError);
    });

    return function onConnectionError() {
      return _ref.apply(this, arguments);
    };
  })();

  openConnection.on('error', onConnectionError);
};

const createConnection = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (localOptions, plugin) {
    const pluginOptions = plugin.options,
          pluginState = plugin.state;

    const options = (0, _defaultsDeep2.default)({}, localOptions, pluginOptions);
    const connectionName = options.connectionName,
          url = options.url,
          connectionOptions = options.connection;
    const _openConnections = pluginState._openConnections,
          _defaultConnection = pluginState._defaultConnection;


    if (connectionOptions.useExisting && _defaultConnection) {
      return _defaultConnection;
    }

    const connectName = connectionName || (0, _v2.default)();
    const connectUrl = (0, _isEmpty2.default)(connectionOptions.tuning) ? url : `${url}?${_qs2.default.stringify(connectionOptions.tuning)}`;
    const operation = _retry2.default.operation(connectionOptions.retry);

    return new _promise2.default(function (resolve, reject) {
      operation.attempt((0, _asyncToGenerator3.default)(function* () {
        try {
          const connection = yield _amqplib2.default.connect(connectUrl, connectionOptions.socket);
          connection._connectName = connectName;
          _openConnections[connectName] = connection;
          pluginState._defaultConnection = _defaultConnection || connection;
          keepConnectionAlive(connection, options, plugin);
          resolve(connection);
          return;
        } catch (error) {
          if (operation.retry(error)) {
            return;
          }
          reject(error);
        }
      }));
    });
  });

  return function createConnection(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();

exports.default = createConnection;