'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChannelName = exports.addSubscriber = exports.publishMessage = exports.addWorker = exports.pushTask = exports.createChannel = exports.assertQueue = exports.closeConnection = exports.createConnection = exports.constants = exports.state = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defaultsDeep = require('lodash/defaultsDeep');

var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);

var _constants = require('./constants');

var _assertQueue2 = require('./assert-queue');

var _assertQueue3 = _interopRequireDefault(_assertQueue2);

var _createConnection2 = require('./create-connection');

var _createConnection3 = _interopRequireDefault(_createConnection2);

var _closeConnection2 = require('./close-connection');

var _closeConnection3 = _interopRequireDefault(_closeConnection2);

var _createChannel2 = require('./create-channel');

var _createChannel3 = _interopRequireDefault(_createChannel2);

var _pushTask2 = require('./push-task');

var _pushTask3 = _interopRequireDefault(_pushTask2);

var _addWorker2 = require('./add-worker');

var _addWorker3 = _interopRequireDefault(_addWorker2);

var _publishMessage2 = require('./publish-message');

var _publishMessage3 = _interopRequireDefault(_publishMessage2);

var _addSubscriber2 = require('./add-subscriber');

var _addSubscriber3 = _interopRequireDefault(_addSubscriber2);

var _getChannelName2 = require('./get-channel-name');

var _getChannelName3 = _interopRequireDefault(_getChannelName2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULTS = {
  preserveChannels: true,
  connection: {
    socket: {},
    tuning: {},
    retry: {
      retries: 0,
      factor: 2,
      minTimeout: 1000,
      maxTimeout: Infinity,
      randomize: false
    },
    useExisting: false
  },
  retryQueue: {
    suffix: '_retry',
    maxCount: 10,
    factor: 2,
    minTimeout: 1 * 1000,
    maxTimeout: 60 * 1000,
    maxLength: 10000
  },
  doneQueue: false
};

const STATE = {
  _defaultConnection: null,
  _openConnections: {},
  _openChannels: {}
};

const setGlobals = globals => {
  globals.state = STATE;
  globals.options = (0, _defaultsDeep2.default)({}, globals.options, DEFAULTS);
};

/* Exports */

const state = exports.state = STATE;
const constants = exports.constants = { ACK: _constants.ACK, NACK: _constants.NACK, REJECT: _constants.REJECT, RETRY: _constants.RETRY };

const createConnection = exports.createConnection = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (options, globals = {}) {
    setGlobals(globals);
    const settings = (0, _defaultsDeep2.default)({}, options, globals.options, DEFAULTS);
    return (0, _createConnection3.default)(settings, globals);
  });

  return function createConnection(_x) {
    return _ref.apply(this, arguments);
  };
})();

const closeConnection = exports.closeConnection = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (options, globals = {}) {
    setGlobals(globals);
    return (0, _closeConnection3.default)(options, globals);
  });

  return function closeConnection(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

const assertQueue = exports.assertQueue = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _assertQueue3.default)(args, globals);
  });

  return function assertQueue(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

const createChannel = exports.createChannel = (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (options, globals = {}) {
    setGlobals(globals);
    const settings = (0, _defaultsDeep2.default)({}, options, globals.options, DEFAULTS);
    return (0, _createChannel3.default)(settings, globals);
  });

  return function createChannel(_x4) {
    return _ref4.apply(this, arguments);
  };
})();

const pushTask = exports.pushTask = (() => {
  var _ref5 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _pushTask3.default)(args, globals);
  });

  return function pushTask(_x5) {
    return _ref5.apply(this, arguments);
  };
})();

const addWorker = exports.addWorker = (() => {
  var _ref6 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _addWorker3.default)(args, globals);
  });

  return function addWorker(_x6) {
    return _ref6.apply(this, arguments);
  };
})();

const publishMessage = exports.publishMessage = (() => {
  var _ref7 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _publishMessage3.default)(args, globals);
  });

  return function publishMessage(_x7) {
    return _ref7.apply(this, arguments);
  };
})();

const addSubscriber = exports.addSubscriber = (() => {
  var _ref8 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _addSubscriber3.default)(args, globals);
  });

  return function addSubscriber(_x8) {
    return _ref8.apply(this, arguments);
  };
})();

const getChannelName = exports.getChannelName = (() => {
  var _ref9 = (0, _asyncToGenerator3.default)(function* (args, globals = {}) {
    setGlobals(globals);
    return (0, _getChannelName3.default)(args, globals);
  });

  return function getChannelName(_x9) {
    return _ref9.apply(this, arguments);
  };
})();