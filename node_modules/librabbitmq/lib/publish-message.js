'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defaultsDeep = require('lodash/defaultsDeep');

var _defaultsDeep2 = _interopRequireDefault(_defaultsDeep);

var _createChannel = require('./create-channel');

var _createChannel2 = _interopRequireDefault(_createChannel);

var _getChannelName = require('./get-channel-name');

var _getChannelName2 = _interopRequireDefault(_getChannelName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultExchangeOptions = {
  durable: false,
  autoDelete: false
};

const defaultMessageOptions = {
  expiration: 0,
  persistent: false,
  contentType: 'application/json',
  contentEncoding: 'utf-8'
};

const publishMessage = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (args, plugin) {
    const exchange = args.exchange,
          topic = args.topic,
          payload = args.payload,
          connection = args.connection,
          options = args.options;
    const pluginOptions = plugin.options,
          pluginState = plugin.state;
    const preserveChannels = pluginOptions.preserveChannels;
    const _openChannels = pluginState._openChannels;

    var _ref2 = options || {};

    const userChannelName = _ref2.channelName,
          channelOptions = _ref2.channelOptions,
          userExchangeOptions = _ref2.exchangeOptions,
          userMessageOptions = _ref2.messageOptions;


    let channel;

    try {
      const channelName = userChannelName || (0, _getChannelName2.default)({ method: 'publishMessage', exchange });

      const exchangeOptions = (0, _defaultsDeep2.default)({}, userExchangeOptions, defaultExchangeOptions);

      const messageOptions = (0, _defaultsDeep2.default)({}, userMessageOptions, defaultMessageOptions);

      messageOptions.type = topic;

      if (_openChannels[channelName]) {
        channel = _openChannels[channelName].channel;
      } else {
        channel = yield (0, _createChannel2.default)({
          name: channelName,
          options: channelOptions,
          connection
        }, plugin);
      }

      yield channel.assertExchange(exchange, 'topic', exchangeOptions);

      const published = yield channel.publish(exchange, `${exchange}.${topic}`, Buffer.from((0, _stringify2.default)(payload), messageOptions.contentEncoding), messageOptions);

      if (!preserveChannels) {
        yield channel.close();
        channel = null;
        return {
          published
        };
      }

      return {
        channel,
        published
      };
    } catch (error) {
      throw error;
    } finally {
      if (!preserveChannels && channel) {
        yield channel.close();
      }
    }
  });

  return function publishMessage(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

exports.default = publishMessage;